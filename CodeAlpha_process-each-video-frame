# object_detection_frames.py

import cv2
from ultralytics import YOLO

# ----------------------------
# 1️⃣ Load pre-trained YOLO model
# ----------------------------
model = YOLO("yolov8n.pt")  # small model, fast for real-time

# ----------------------------
# 2️⃣ Initialize video source
# ----------------------------
video_source = 0  # 0 = webcam, or "video.mp4" for video file
cap = cv2.VideoCapture(video_source)

if not cap.isOpened():
    print("Error: Cannot open video source")
    exit()

print("Press 'q' to quit")

# ----------------------------
# 3️⃣ Process each frame
# ----------------------------
while True:
    ret, frame = cap.read()
    if not ret:
        print("Stream ended or cannot read frame")
        break

    # Run object detection on the frame
    results = model(frame)

    # Draw bounding boxes and labels on the frame
    for box in results[0].boxes:  # iterate over detected objects
        x1, y1, x2, y2 = map(int, box.xyxy[0])  # box coordinates
        conf = box.conf[0]  # confidence
        cls = int(box.cls[0])  # class ID
        label = f"{model.names[cls]} {conf:.2f}"

        # Draw rectangle and label
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, label, (x1, y1 - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Display the frame
    cv2.imshow("YOLO Object Detection", frame)

    # Exit if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# ----------------------------
# 4️⃣ Release resources
# ----------------------------
cap.release()
cv2.destroyAllWindows()
print("Video stream closed")
